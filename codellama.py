# -*- coding: utf-8 -*-
"""CodeLlama.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yd4zl7tCThVtT59aVT37tyhhslTmrPEF
"""

# # CodeLlama for Python Competence Analysis
#
# **Objective:** Evaluate CodeLlama's ability to analyze student Python code and generate pedagogical prompts.

# %%
# Install dependencies
!pip install -U bitsandbytes transformers accelerate torch

# importing lib
from transformers import AutoModelForCausalLM, AutoTokenizer, BitsAndBytesConfig
import torch

# Configure quantization
quantization_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_compute_dtype=torch.float16,
    bnb_4bit_quant_type="nf4",
)

# Load model
model_name = "codellama/CodeLlama-7b-hf"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    device_map="auto",
    quantization_config=quantization_config,
)

# analysing the student code
def analyze_code(code):
    """Analyze student code for errors and misconceptions."""
    prompt = f"""
    You are a Python teaching assistant.
    Analyze the following code for errors, inefficiencies, or misconceptions.
    Explain the issues and suggest a question to assess the student's understanding.

    Code:
    ```python
    {code}
    ```
    """
    inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
    outputs = model.generate(**inputs, max_new_tokens=200, temperature=0.3)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

def generate_prompts(code):
    """Generate Socratic prompts to assess understanding."""
    prompt = f"""
    Generate 3 Socratic questions to assess a student's understanding of this code:
    ```python
    {code}
    ```
    Focus on conceptual gaps, not syntax errors.
    """
    inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
    outputs = model.generate(**inputs, max_new_tokens=150, temperature=0.5)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# %%
# Example student code of factorial
student_code = """
a = 23
b = 45
d = 43
print(a/d)
"""

# %%
# Run analysis
analysis = analyze_code(student_code)
print("=== CODE ANALYSIS ===\n", analysis)

# %%
# Run prompt generation
prompts = generate_prompts(student_code)
print("\n=== SUGGESTED PROMPTS ===\n", prompts)

# %%
# Save results
with open("codellama_output.txt", "w") as f:
    f.write("=== CODE ANALYSIS ===\n" + analysis + "\n\n")
    f.write("=== SUGGESTED PROMPTS ===\n" + prompts + "\n")

# %%
# Download results (Colab only)
from google.colab import files
files.download("codellama_output.txt")

